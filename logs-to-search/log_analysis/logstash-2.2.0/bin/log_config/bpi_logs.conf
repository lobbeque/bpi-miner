input {
    stdin {
        codec => plain {
            charset => "ISO-8859-1"
        }    
    }
}

filter {

    grok {
        match => {
            'message' => '%{HOSTNAME:ip}%{SPACE}-%{SPACE}%{WORD:poste}-%{WORD:geo1}-%{WORD:geo2}-%{WORD:geo3}%{SPACE}\[%{DATESTAMP:datefield}]%{SPACE}"%{WORD:req} %{GREEDYDATA:url} %{SYSLOGPROG}\"%{SPACE}%{NUMBER:res:int}%{SPACE}-%{SPACE}-%{SPACE}%{NUMBER:catolfeo:int}%{SPACE}%{GREEDYDATA:crap}'
        }
    }

    grok {
       match => ['url', '(https?|ftp:\/\/)?(www|ftp|http)?(\.)?(?<domain>(?<domain2>([0-9]{1,3}\.){3}([0-9]{1,3})))([\/\w \.-]*)*\/?','url', '(https?|ftp:\/\/)?(www|ftp|http)?(\.)?(?<domain>(([\da-z\.-]+)\.)?(?<domain2>([\da-z-]+?)(?<extension>((\.(((gouv|com|presse|asso|nom|([a-z]{2})))\.(fr|uk|au|hu|il|za)))))))([\/\w \.-]*)*\/??', 'url', '(https?|ftp:\/\/)?(www|ftp|http)?(\.)?(?<domain>(([\da-z\.-]+)\.)?(?<domain2>([\da-z\.-]+)(?<extension>(\.([a-z\.]{2,6})))))([\/\w \.-]*)*\/?' ]
    }
    #if [ip] !~ "^10\.6.+" {
    #    drop {}
    #}
    #if [poste] =~ "^sp" {
    #    drop {}
    #}

    if [poste] !~ "^PUB" {
        drop {}
    }

    if [catolfeo] != 51 {
       drop {}
    }

    if [catolfeo] == 18 or [catolfeo] == 1226 or [catolfeo] == 12 or [catolfeo] == 1235 or [catolfeo] == 1000 {
        drop {}
    }
    translate {
        regex => true
        field => "domain"
        destination => "domain3"
        dictionary_path => "/home/log_analysis/logstash-2.2.0/bin/log_config/ads.yml"
    }
    translate {
        regex => true
        field => "url"
        destination => "domain3"
        dictionary_path => "/home/log_analysis/logstash-2.2.0/bin/log_config/ads_url.yml"
    }    
    translate {
        regex => true
        field => "catolfeo"
        destination => "catolfeo_explained"
        dictionary_path => "/home/log_analysis/logstash-2.2.0/bin/log_config/cat_olfeo.yml"
    }  
    translate {
        regex => true
        field => "domain"
        destination => "catbpi"
        dictionary_path => "/home/log_analysis/logstash-2.2.0/bin/log_config/cat_bpi.yml"
    }       
    if [domain3] == "ads" {
        drop {}
    }
    if [url] =~ "^.*(\.js|\.gif|\.png|\.jpg|\.jpeg|\.css|\.xml|\.ico).*$" {
        drop {}
    }
    ruby {

        code => " require 'date'
        t = DateTime.parse(event['datefield']);
	    # On definit le nouveau Timestamp dans le fuseau horaire UTC
        # new_t = DateTime.new(t.year, t.month, t.day, t.hour, t.min, t.sec) - 4 / 24.0
        new_t = DateTime.new(t.year, t.month, t.day, t.hour, t.min, t.sec) - 2 / 24.0
        new_t_s = new_t.strftime('%d %b %Y %H:%M:%S')
        event['datefield2'] = new_t.to_time.to_i "
    }
    
    date {
        match => ["datefield2", "UNIX"]
        add_field => {
            "date" => "%{+YYYY.MM.dd}"
        }
    }

    ruby {

        code => " require 'date'
        t = DateTime.parse(event['datefield']);
        s = t.to_time.sec - t.to_time.sec % 6
        new_t = DateTime.new(t.year, t.month, t.day, t.hour, t.min, s)
        new_t_s = new_t.strftime('%d %b %Y %H:%M:%S')
        event['new_timestamp'] = new_t_s;
        "
    }

    mutate {
        add_field => {"poste_id" => "%{poste}-%{geo1}-%{geo2}-%{geo3}"} 
        convert => {"poste_id" => "string"}
    } 

    translate {
        regex => true
        field => "poste_id"
        destination => "poste_profil"
        dictionary_path => "/home/log_analysis/logstash-2.2.0/bin/log_config/poste_profil.yml"
    } 

    translate {
        regex => true
        field => "poste_id"
        destination => "poste_sector"
        dictionary_path => "/home/log_analysis/logstash-2.2.0/bin/log_config/poste_sector.yml"
    }    

    mutate {
        add_field => {"session_uid" => "%{ip}-%{poste}-%{geo1}-%{geo2}-%{geo3}"} 
    }    

    ruby {
        code => "require 'digest/md5';
        event['computed_id'] = Digest::MD5.hexdigest(event['ip'] + event['new_timestamp'] + event['domain2'])
        "
    }

    mutate {
        remove_field => ["new_timestamp", "datefield", "message", "SPACE", "crap"]# Removes the redundant fields
    }
}



output {

    #stdout {
     #   codec => rubydebug {}
    #}
	if "_grokparsefailure" not in [tags] {
    elasticsearch {
    # trouver un id 
        document_id => "%{computed_id}"
        action => "create"
        hosts => "localhost"
        index => "bpi_logs-%{+YYYY.MM.dd}"
    
    }}

}
